local UserInputService = game:GetService("UserInputService")
local Debris = game:GetService("Debris")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local toysFolder = ReplicatedStorage:FindFirstChild("ToysFolder") or Instance.new("Folder", ReplicatedStorage)
toysFolder.Name = "ToysFolder"

local function spawnItem(itemName, position, orientation)
    task.spawn(function()
        local cframe = CFrame.new(position)
        local rotation = Vector3.new(0, 90, 0)
        ReplicatedStorage.MenuToys.SpawnToyRemoteFunction:InvokeServer(itemName, cframe, rotation)
    end)
end

local function getDescendantParts(name)
    local parts = {}
    for _, descendant in ipairs(workspace:GetDescendants()) do
        if descendant:IsA("BasePart") and descendant.Name == name then
            table.insert(parts, descendant)
        end
    end
    return parts
end

local poisonHurtParts = getDescendantParts("PoisonHurtPart")
local paintPlayerParts = getDescendantParts("PaintPlayerPart")
local playerList = {}

local function updatePlayerList()
    playerList = {}
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(playerList, player.Name)
    end
end

local function onPlayerAdded(player)
    table.insert(playerList, player.Name)
end

local function onPlayerRemoving(player)
    for i, name in ipairs(playerList) do
        if name == player.Name then
            table.remove(playerList, i)
            break
        end
    end
end

local function grabHandler(grabType)
    while true do
        local success, err = pcall(function()
            local child = workspace:FindFirstChild("GrabParts")
            if child and child.Name == "GrabParts" then
                local grabPart = child:FindFirstChild("GrabPart")
                local grabbedPart = grabPart:FindFirstChild("WeldConstraint").Part1
                local head = grabbedPart.Parent:FindFirstChild("Head")
                if head then
                    while workspace:FindFirstChild("GrabParts") do
                        local partsTable = grabType == "poison" and poisonHurtParts or paintPlayerParts
                        for _, part in pairs(partsTable) do
                            part.Size = Vector3.new(2, 2, 2)
                            part.Transparency = 1
                            part.Position = head.Position
                        end
                        wait()
                        for _, part in pairs(partsTable) do
                            part.Position = Vector3.new(0, -200, 0)
                        end
                    end
                    for _, part in pairs(partsTable) do
                        part.Position = Vector3.new(0, -200, 0)
                    end
                end
            end
        end)
        wait()
    end
end

local function noclipHandler()
    while true do
        local success, err = pcall(function()
            local child = workspace:FindFirstChild("GrabParts")
            if child and child.Name == "GrabParts" then
                local grabPart = child:FindFirstChild("GrabPart")
                local grabbedPart = grabPart:FindFirstChild("WeldConstraint").Part1
                local character = grabbedPart.Parent
                if character.HumanoidRootPart then
                    while workspace:FindFirstChild("GrabParts") do
                        for _, part in pairs(character:GetChildren()) do
                            if part:IsA("BasePart") then
                                part.CanCollide = false
                            end
                        end
                        wait()
                    end
                    for _, part in pairs(character:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = true
                        end
                    end
                end
            end
        end)
        wait()
    end
end

local function deathGrabHandler()
    while true do
        local success, err = pcall(function()
            local child = workspace:FindFirstChild("GrabParts")
            if child and child.Name == "GrabParts" then
                local grabPart = child:FindFirstChild("GrabPart")
                local grabbedPart = grabPart:FindFirstChild("WeldConstraint").Part1
                local humanoid = grabbedPart.Parent:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    while workspace:FindFirstChild("GrabParts") do
                        humanoid:ChangeState(Enum.HumanoidStateType.Dead)
                        wait()
                    end
                end
            end
        end)
        wait()
    end
end

local function setupAntiExplosion(character)
    local partOwner = character:WaitForChild("Humanoid"):FindFirstChild("Ragdolled")
    if partOwner then
        local partOwnerChangedConn
        partOwnerChangedConn = partOwner:GetPropertyChangedSignal("Value"):Connect(function()
            if partOwner.Value then
                for _, part in ipairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.Anchored = true
                    end
                end
            else
                for _, part in ipairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.Anchored = false
                    end
                end
            end
        end)
        antiExplosionConnection = partOwnerChangedConn
    end
end

local antiGrabConnection

local function setupAntiGrab()
    local Player = game:GetService("Players").LocalPlayer
    local BeingHeld = Player:WaitForChild("IsHeld")
    local StruggleEvent = game:GetService("ReplicatedStorage"):WaitForChild("CharacterEvents"):WaitForChild("Struggle")

    antiGrabConnection = BeingHeld.Changed:Connect(function(C)
        if C == true then
            local Event
            Event = game:GetService("RunService").RenderStepped:Connect(function()
                if BeingHeld.Value == true then
                    Player.Character["HumanoidRootPart"].AssemblyLinearVelocity = Vector3.new()
                    StruggleEvent:FireServer(Player)
                elseif BeingHeld.Value == false then
                    Event:Disconnect()
                end
            end)
        end
    end)
end

local function disableAntiGrab()
    if antiGrabConnection then
        antiGrabConnection:Disconnect()
        antiGrabConnection = nil
    end
end

local currentKunai = nil
local kunaiSpawningEnabled = false

local function spawnItemCf(itemName, cframe)
    local rotation = Vector3.new(90, 90, 0)
    local toy = ReplicatedStorage.MenuToys.SpawnToyRemoteFunction:InvokeServer(itemName, cframe, rotation)
    return toy
end

local function attachKunaiToThigh()
    if currentKunai and currentKunai.Parent then 
        return 
    end
    local playerCharacter = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    local torso = playerCharacter:WaitForChild("Torso", 5)
    if torso then
        local kunaiPosition = torso.CFrame
            * CFrame.new(-0.5, -torso.Size.Y / 2, 0)
            * CFrame.Angles(math.rad(-100), 0, 0)
        spawnItemCf("NinjaKunai", kunaiPosition)
        for i = 1, 20 do
            local toysFolder = workspace:FindFirstChild(localPlayer.Name .. "SpawnedInToys")
            if toysFolder then
                currentKunai = toysFolder:FindFirstChild("NinjaKunai")
                if currentKunai then
                    break
                end
            end
            task.wait()
        end
        if currentKunai then
            currentKunai.AncestryChanged:Connect(function(_, parent)
                if not parent and kunaiSpawningEnabled then
                    currentKunai = nil
                    attachKunaiToThigh()
                end
            end)
        else
            task.wait(1)
            attachKunaiToThigh()
        end
    end
end

local function monitorKunai()
    while kunaiSpawningEnabled do
        if not (currentKunai and currentKunai.Parent) then
            currentKunai = nil
            attachKunaiToThigh()
        end
        task.wait()
    end
end

local function initializeKunai()
    attachKunaiToThigh()
    task.spawn(monitorKunai)
end

local function disableKunai()
    kunaiSpawningEnabled = false
    if currentKunai then
        currentKunai:Destroy()
        currentKunai = nil
    end
end

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/tomoneko2222/roblox-script/refs/heads/main/orion')))()

local Window = OrionLib:MakeWindow({Name = "物人用script", HidePremium = false, SaveConfig = true, ConfigFolder = "OrionTest"})

local GrabTab = Window:MakeTab({
    Name = "grab",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

_G.strength = 400

GrabTab:AddSlider({
    Name = "Strength",
    Min = 300,
    Max = 4000,
    Color = Color3.fromRGB(240, 0, 0),
    ValueName = ".",
    Increment = 1,
    Default = _G.strength,
    Save = true,
    Flag = "StrengthSlider",
    Callback = function(value)
        _G.strength = value
    end
})

GrabTab:AddToggle({
    Name = "Strength",
    Default = false,
    Color = Color3.fromRGB(240, 0, 0),
    Save = true,
    Flag = "StrengthToggle",
    Callback = function(enabled)
        if enabled then
            strengthConnection = workspace.ChildAdded:Connect(function(model)
                if model.Name == "GrabParts" then
                    local partToImpulse = model.GrabPart.WeldConstraint.Part1
                    if partToImpulse then
                        local velocityObj = Instance.new("BodyVelocity")
                        velocityObj.MaxForce = Vector3.new(0, 0, 0)
                        velocityObj.Parent = partToImpulse

                        local function applyVelocity()
                            velocityObj.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                            velocityObj.Velocity = workspace.CurrentCamera.CFrame.LookVector * _G.strength
                            Debris:AddItem(velocityObj, 1)
                        end

                        model.GrabPart:GetPropertyChangedSignal("Parent"):Connect(function()
                            if not model.Parent then
                                if UserInputService:GetLastInputType() == Enum.UserInputType.MouseButton2 then
                                    applyVelocity()
                                else
                                    velocityObj:Destroy()
                                end
                            end
                        end)

                        partToImpulse:GetPropertyChangedSignal("Parent"):Connect(function()
                            if not partToImpulse.Parent then
                                velocityObj:Destroy()
                            end
                        end)
                    end
                end
            end)
        elseif strengthConnection then
            strengthConnection:Disconnect()
        end
    end
})

GrabTab:AddToggle({
    Name = "Poison Grab",
    Default = false,
    Save = true,
    Color = Color3.fromRGB(240, 0, 0),
    Flag = "PoisonGrab",
    Callback = function(enabled)
        if enabled then
            poisonGrabCoroutine = coroutine.create(function() grabHandler("poison") end)
            coroutine.resume(poisonGrabCoroutine)
        else
            if poisonGrabCoroutine then
                coroutine.close(poisonGrabCoroutine)
                poisonGrabCoroutine = nil
                for _, part in pairs(poisonHurtParts) do
                    part.Position = Vector3.new(0, -200, 0)
                end
            end
        end
    end
})

GrabTab:AddToggle({
    Name = "Radioactive Grab",
    Default = false,
    Color = Color3.fromRGB(240, 0, 0),
    Save = true,
    Flag = "RadioactiveGrab",
    Callback = function(enabled)
        if enabled then
            ufoGrabCoroutine = coroutine.create(function() grabHandler("radioactive") end)
            coroutine.resume(ufoGrabCoroutine)
        else
            if ufoGrabCoroutine then
                coroutine.close(ufoGrabCoroutine)
                ufoGrabCoroutine = nil
                for _, part in pairs(paintPlayerParts) do
                    part.Position = Vector3.new(0, -200, 0)
                end
            end
        end
    end
})

GrabTab:AddToggle({
    Name = "Noclip Grab",
    Default = false,
    Save = true,
    Color = Color3.fromRGB(240, 0, 0),
    Flag = "NoclipGrab",
    Callback = function(enabled)
        if enabled then
            noclipGrabCoroutine = coroutine.create(noclipHandler)
            coroutine.resume(noclipGrabCoroutine)
        else
            if noclipGrabCoroutine then
                coroutine.close(noclipGrabCoroutine)
                noclipGrabCoroutine = nil
            end
        end
    end
})

GrabTab:AddToggle({
    Name = "Death Grab",
    Default = false,
    Save = true,
    Color = Color3.fromRGB(240, 0, 0),
    Flag = "DeathGrab",
    Callback = function(enabled)
        if enabled then
            deathGrabCoroutine = coroutine.create(deathGrabHandler)
            coroutine.resume(deathGrabCoroutine)
        else
            if deathGrabCoroutine then
                coroutine.close(deathGrabCoroutine)
                deathGrabCoroutine = nil
            end
        end
    end
})

local spinningObjects = {}

GrabTab:AddToggle({
    Name = "Spin Grab",
    Default = false,
    Save = true,
    Color = Color3.fromRGB(240, 0, 0),
    Flag = "SpinGrab",
    Callback = function(enabled)
        if enabled then
            gravityGrabConnection = workspace.ChildAdded:Connect(function(model)
                if model.Name == "GrabParts" then
                    local partToImpulse = model.GrabPart.WeldConstraint.Part1
                    if partToImpulse then
                        local bodyAngularVelocity = Instance.new("BodyAngularVelocity")
                        bodyAngularVelocity.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
                        bodyAngularVelocity.AngularVelocity = Vector3.new(0, 5, 0)
                        bodyAngularVelocity.Parent = partToImpulse

                        local bodyPosition = Instance.new("BodyPosition")
                        bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                        bodyPosition.Position = partToImpulse.Position
                        bodyPosition.Parent = partToImpulse

                        table.insert(spinningObjects, {part = partToImpulse, bav = bodyAngularVelocity, bp = bodyPosition})
                    end
                end
            end)
        else
            if gravityGrabConnection then
                gravityGrabConnection:Disconnect()
            end
        end
    end
})

GrabTab:AddButton({
    Name = "unallspin",
    Callback = function()
        for _, obj in ipairs(spinningObjects) do
            if obj.part and obj.part.Parent then
                if obj.bav then obj.bav:Destroy() end
                if obj.bp then obj.bp:Destroy() end
            end
        end
        spinningObjects = {}
    end
})

local selectedPlayer = nil

local function updatePlayerList()
    local playerList = {"Select Player"}
    for _, player in ipairs(Players:GetPlayers()) do
        table.insert(playerList, player.Name)
    end
    return playerList
end

local playerDropdown = GrabTab:AddDropdown({
    Name = "Select Player for Bring Grab",
    Default = "Select Player",
    Options = updatePlayerList(),
    Callback = function(Value)
        selectedPlayer = Value ~= "Select Player" and Players:FindFirstChild(Value) or nil
    end    
})

Players.PlayerAdded:Connect(function()
    playerDropdown:Refresh(updatePlayerList(), true)
end)

Players.PlayerRemoving:Connect(function()
    playerDropdown:Refresh(updatePlayerList(), true)
end)

local movingObjects = {}

local function setCanCollide(part, value)
    if part:IsA("BasePart") and not part.Anchored then
        part.CanCollide = value
    end
end

local function processDescendants(part, value)
    for _, descendant in ipairs(part:GetDescendants()) do
        setCanCollide(descendant, value)
    end
end

GrabTab:AddToggle({
    Name = "Bring Grab",
    Default = false,
    Save = true,
    Color = Color3.fromRGB(240, 0, 0),
    Flag = "BringGrab",
    Callback = function(enabled)
        if enabled then
            bringGrabConnection = workspace.ChildAdded:Connect(function(model)
                if model.Name == "GrabParts" and selectedPlayer then
                    local partToMove = model:WaitForChild("GrabPart"):WaitForChild("WeldConstraint").Part1
                    if partToMove and not partToMove.Anchored then
                        local bodyPosition = Instance.new("BodyPosition")
                        bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                        bodyPosition.Parent = partToMove

                        setCanCollide(partToMove, false)
                        processDescendants(partToMove, false)

                        local updatePositionConnection
                        updatePositionConnection = game:GetService("RunService").Heartbeat:Connect(function()
                            if selectedPlayer and selectedPlayer.Character and selectedPlayer.Character:FindFirstChild("HumanoidRootPart") then
                                bodyPosition.Position = selectedPlayer.Character.HumanoidRootPart.Position
                            end
                        end)

                        table.insert(movingObjects, {part = partToMove, bodyPosition = bodyPosition, connection = updatePositionConnection})
                    end
                end
            end)
        else
            if bringGrabConnection then
                bringGrabConnection:Disconnect()
            end
            
            for _, obj in ipairs(movingObjects) do
                if obj.bodyPosition then obj.bodyPosition:Destroy() end
                if obj.connection then obj.connection:Disconnect() end
                
                if obj.part then
                    setCanCollide(obj.part, true)
                    processDescendants(obj.part, true)
                end 
            end 
            
            movingObjects = {}
        end 
    end 
})

local movingObjectsV2 = {}
local circleSpeed = 2 * math.pi / 1
local circleRadius = 110

local function moveInCircle(part, center, radius, speed)
    local angle = 0
    local runService = game:GetService("RunService")

    local bodyPosition = Instance.new("BodyPosition")
    bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyPosition.Parent = part

    local connection
    connection = runService.Heartbeat:Connect(function(deltaTime)
        if not part.Parent then
            connection:Disconnect()
            bodyPosition:Destroy()
            return
        end

        angle = angle + speed * deltaTime
        local x = center.Position.X + radius * math.cos(angle)
        local z = center.Position.Z + radius * math.sin(angle)
        bodyPosition.Position = Vector3.new(x, center.Position.Y, z)
    end)

    return {bodyPosition = bodyPosition, connection = connection}
end

GrabTab:AddToggle({
    Name = "Bring Grab v2",
    Default = false,
    Save = true,
    Color = Color3.fromRGB(240, 0, 0),
    Flag = "BringGrabV2",
    Callback = function(enabled)
        if enabled then
            bringGrabV2Connection = workspace.ChildAdded:Connect(function(model)
                if model.Name == "GrabParts" and selectedPlayer then
                    local partToMove = model:WaitForChild("GrabPart"):WaitForChild("WeldConstraint").Part1
                    if partToMove and not partToMove.Anchored then
                        local moveData = moveInCircle(partToMove, selectedPlayer.Character.HumanoidRootPart, circleRadius, circleSpeed)
                        table.insert(movingObjectsV2, {part = partToMove, bodyPosition = moveData.bodyPosition, connection = moveData.connection})
                    end
                end
            end)
        else
            if bringGrabV2Connection then
                bringGrabV2Connection:Disconnect()
            end

            for _, obj in ipairs(movingObjectsV2) do
                if obj.bodyPosition then obj.bodyPosition:Destroy() end
                if obj.connection then obj.connection:Disconnect() end
            end

            movingObjectsV2 = {}
        end
    end
})

local AntiTab = Window:MakeTab({
    Name = "Anti",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})
 

AntiTab:AddToggle({
    Name = "Anti-Explosion",
    Default = false,
    Color = Color3.fromRGB(240, 0, 0),
    Save = true,
    Flag = "AntiExplosion",
    Callback = function(enabled)
        local localPlayer = game.Players.LocalPlayer

        if enabled then
            if localPlayer.Character then
                setupAntiExplosion(localPlayer.Character)
            end
            characterAddedConn = localPlayer.CharacterAdded:Connect(function(character)
                if antiExplosionConnection then
                    antiExplosionConnection:Disconnect()
                end
                setupAntiExplosion(character)
            end)
        else
            if antiExplosionConnection then
                antiExplosionConnection:Disconnect()
                antiExplosionConnection = nil
            end
            if characterAddedConn then
                characterAddedConn:Disconnect()
                characterAddedConn = nil
            end
        end
    end
})

AntiTab:AddToggle({
    Name = "Anti-Grab",
    Default = false,
    Color = Color3.fromRGB(240, 0, 0),
    Save = true,
    Flag = "AntiGrab",
    Callback = function(enabled)
        if enabled then
            setupAntiGrab()
        else
            disableAntiGrab()
        end
    end
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local currentKunai = nil
local kunaiSpawningEnabled = false

local function spawnItemCf(itemName, cframe)
    local rotation = Vector3.new(90, 90, 0)
    local toy = ReplicatedStorage.MenuToys.SpawnToyRemoteFunction:InvokeServer(itemName, cframe, rotation)
    return toy
end

local function attachKunaiToThigh()
    if currentKunai and currentKunai.Parent then 
        return 
    end
    local playerCharacter = localPlayer.Character or localPlayer.CharacterAdded:Wait()
    local torso = playerCharacter:WaitForChild("Torso", 5)
    if torso then
        local kunaiPosition = torso.CFrame
            * CFrame.new(-0.5, -torso.Size.Y / 2, 0)
            * CFrame.Angles(math.rad(-100), 0, 0)
        spawnItemCf("NinjaKunai", kunaiPosition)
        for i = 1, 20 do
            local toysFolder = workspace:FindFirstChild(localPlayer.Name .. "SpawnedInToys")
            if toysFolder then
                currentKunai = toysFolder:FindFirstChild("NinjaKunai")
                if currentKunai then
                    break
                end
            end
            task.wait()
        end
        if currentKunai then
            currentKunai.AncestryChanged:Connect(function(_, parent)
                if not parent and kunaiSpawningEnabled then
                    currentKunai = nil
                    attachKunaiToThigh()
                end
            end)
        else
            task.wait(1)
            attachKunaiToThigh()
        end
    else
        warn("Torso not found!")
    end
end

local function monitorKunai()
    while kunaiSpawningEnabled do
        if not (currentKunai and currentKunai.Parent) then
            currentKunai = nil
            attachKunaiToThigh()
        end
        task.wait()
    end
end

local function initializeKunai()
    attachKunaiToThigh()
    task.spawn(monitorKunai)
end

local function disableKunai()
    kunaiSpawningEnabled = false
    if currentKunai then
        currentKunai:Destroy()
        currentKunai = nil
    end
end

AntiTab:AddToggle({
    Name = "Anti-Kick",
    Default = false,
    Color = Color3.fromRGB(240, 0, 0),
    Save = true,
    Flag = "AntiKick",
    Callback = function(enabled)
        if enabled then
            kunaiSpawningEnabled = true
            initializeKunai()
        else
            disableKunai()
        end
    end
})
